#!/usr/bin/env python
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC
import random 
import os
import subprocess
import re 
import getopt
import sys
import signal
from math import ceil

opts, arguments = getopt.getopt(sys.argv[1:], "f:i:c:", 
["fasta","iterations","cutoff"])
for option, argument in opts:
    if option in ("-f", "--fasta"):
        fasta_file = argument
        record_dict    = SeqIO.index(argument, "fasta")
    elif option in ("-i", "--iterations"):
        iterations     = int(argument)
    elif option in ("-c", "--cutoff"):
        transcripts_cutoff = float(argument)


amino_acid_letters = ['A', 'R', 'N', 'D', 'B', 'C', 'Q', 'E', 'Z', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V']
neg_hits_cutoff = iterations - transcripts_cutoff
pwd = os.getcwd()

def write_file(object_name, file_name, mode):
    file_path=pwd + file_name
    handle = open(file_path, mode)    
    handle.write(str(object_name))
    handle.close()


def mutation_list():
    position = 0
    mutation_list = []
    for i in protein_sequence :
    	position = position + 1
    	for aa in amino_acid_code:
            mutation_list.append("%s%s%s" % (i,position,aa))
    write_file(mutation_list, "/var", "w")
    
def prepare_sequence():
    cds_sequence, cds_length, protein_sequence = ("","","")
    cds_sequence = record_dict[keys].seq
    cds_name = record_dict[keys].id
    protein_sequence = cds_sequence.translate()
    cds_length = len(str(cds_sequence))
    position = 0
    write_file("","/var","w")
    for i in protein_sequence :
    	position = position + 1
    	for aa in amino_acid_letters:
            write_file("%s%s%s\n" % (i,position,aa), "/var", "a")
    fasta_record = ">%s\n%s" % (cds_name, protein_sequence)
    write_file(fasta_record, "/fasta_record", 'w')
    return cds_sequence, cds_length, cds_name
    
    
def prepare_command_line ():
    supporting_set = cds_name + ".sss"
    provean_cmd = ["provean.sh","-q","fasta_record","-v","var_file_2"]
    if os.path.isfile(supporting_set):
        provean_cmd.append("--supporting_set")
    else:
        provean_cmd.append("--save_supporting_set")
    provean_cmd.append(supporting_set)
    return provean_cmd
    
def run_provean():
    proc = subprocess.Popen(provean_cmd, stdout=subprocess.PIPE)
    results = proc.stdout.read()
    nondel_list = []
    del_list = []
    for lines in results:
        lines = lines.rstrip()
        if re.match("#|\[", lines):
            sub_results = lines.split("\t")
        if sub_results[-1] > -2.5:
            nondel_list.append(sub_results[0])
        elif sub_results[-1] < -2.5:
            del_list.append(sub_results[0]) 
    return nondel_list, del_list
    
def random_snps(cycle_number):
    snp_input_list = []
    snp_input      = ""
    snp_pos=random.sample(range(1,cds_length+1), cycle_number)
    snp_pos.sort()
    for i in snp_pos:
        base      = cds_sequence[i-1]
        snp_base  = random.choice([x for x in "ATGC" if x != base])
        snp_input = "%s%s%s" % (base, str(i), snp_base)
        snp_input_list.append(snp_input)
    snp_input="-".join(snp_input_list)
    return snp_input

def translation(snps_translate):
    AA_var_list = []
    input_snp_translate = snps_translate.split("-")
    for i in input_snp_translate:
        print i
        base_snp = i[-1]
        base_loc = i[1:-1]
        print base_loc
        base_loc = int(base_loc)
        if (base_loc%3 == 0):
            original_seq = str(cds_sequence)[base_loc-3:base_loc]
            mutant_seq = original_seq[:2] + base_snp
        elif (base_loc%3 == 1):
            original_seq = str(cds_sequence)[base_loc-1:base_loc+2] 
            mutant_seq = original_seq[0] + base_snp + original_seq[2]
        elif (base_loc%3 == 2):
            original_seq = str(cds_sequence)[base_loc-2:base_loc+1]
            mutant_seq = base_snp + original_seq[1:3]
        ori_AA = str(Seq(original_seq, IUPAC.unambiguous_dna).translate())
        mut_AA = str(Seq(mutant_seq, IUPAC.unambiguous_dna).translate())
        AA_pos = find_AA_pos(base_loc)
        AA_var = "%s%s%s" % (ori_AA, str(AA_pos), mut_AA)
        AA_var_list.append(AA_var)
    AA_var_list="-".join(AA_var_list)
    return AA_var_list

def check_start_stop(AA_var_list):
    n = 0
    AA_var_list = AA_var_list.split("-")
    for i in AA_var_list:
        AA_loc = i[1:-1]
        ori_AA = i[0]
        mut_AA = i[-1]
        if (AA_loc == 1):
            n = 1
            break
        elif (ori_AA == '*' or mut_AA == '*') and (mut_AA != ori_AA):
            n = 1
            break
                    
    return n 
            
def check_del_snp(AA_var_list):
    n = 0
    AA_var_list = AA_var_list.split("-")
    if bool(set(AA_var_list).intersection(set(del_list))) == True:
        n = 1
    return n
        
        
    
def find_AA_pos(base_loc):
    aa_pos = base_loc/3
    aa_pos = ceil(aa_pos)
    aa_pos = int(aa_pos)
    return aa_pos
    
for keys in record_dict:
    cds_sequence, cds_length, cds_name = prepare_sequence()
    provean_cmd = prepare_command_line()
    nondel_list, del_list = run_provean()
    
    i2, cycle = (0,1)
    while i2 < 1:
        n, pos_hits, neg_hits = (0,0,0)
        snp_list = []
        while (n < iterations) or (n < (cds_length * 3)): ###(iternations and number of snps to introduced.)
            snp_input = random_snps(cycle)
            if snp_input not in snp_list:
                snp_list.append(snp_input)
                n = n + 1
            #else:
                #continue
        n = 0
        for snps_translate in snp_list:
            if pos_hits > transcripts_cutoff:
                i2 = 1
                break
            AA_var_list = translation(snps_translate)
            if(check_start_stop(AA_var_list) == 1):
                pos_hits += 1
                continue
            elif(check_del_snp(AA_var_list) == 1):
                pos_hits += 1
                continue
            else:
                neg_hits +=1
            if neg_hits > neg_hits_cutoff:
                cycle += 1
                break
    
    results_file = "%s\t%s\t%s" % (cds_name, cds_length, str(cycle))
    write_file(results_file, "/results_provean", "a")

            
    
  